/* USB MIDI AnalogControlChange Example

   You must select MIDI from the "Tools > USB Type" menu
   http://www.pjrc.com/teensy/td_midi.html

   This example code is in the public domain.
*/

#include <Bounce.h>
#include <ResponsiveAnalogRead.h>

ResponsiveAnalogRead analogOne(A0, true);
ResponsiveAnalogRead analogTwo(A1, true);
ResponsiveAnalogRead analogThree(A2, true);
ResponsiveAnalogRead analogFour(A3, true);
ResponsiveAnalogRead analogFive(A4, true);
ResponsiveAnalogRead analogSix(A5, true);

int numButtons = 14;

Bounce button0 = Bounce(0, 5);
Bounce button1 = Bounce(1, 5);  // 5 = 5 ms debounce time
Bounce button2 = Bounce(2, 5);  // which is appropriate for good
Bounce button3 = Bounce(3, 5);  // quality mechanical pushbuttons
Bounce button4 = Bounce(4, 5);
Bounce button5 = Bounce(5, 5);  // if a button is too "sensitive"
Bounce button6 = Bounce(6, 5);  // to rapid touch, you can
Bounce button7 = Bounce(7, 5);  // increase this time.
Bounce button8 = Bounce(8, 5);
Bounce button9 = Bounce(9, 5);
Bounce button10 = Bounce(10, 5);
Bounce button11 = Bounce(11, 5);
Bounce button12 = Bounce(12, 5);

// the MIDI channel number to send messages
const int channel = 1;

// the MIDI continuous controller for each analog input
const int controllerA0 = 17; // 10 = pan position
const int controllerA1 = 19; // 11 = volume/expression
const int controllerA2 = 20; // 91 = reverb level
const int controllerA3 = 7; // 93 = chorus level
const int controllerA4 = 16; // 91 = reverb level
const int controllerA5 = 18; // 93 = chorus level

int greenPin =  23;
int bluePin =  21;
int redPin =  22;
int upper_layer = 20;
int lower_layer = 12;

void setup() {
  for (int i=0; i<numButtons; i++) {
    pinMode(i, INPUT_PULLUP);
  }

  pinMode(upper_layer, INPUT_PULLUP);
  pinMode(lower_layer, INPUT_PULLUP);
  
  pinMode(redPin, OUTPUT);
  pinMode(greenPin, OUTPUT);
  pinMode(bluePin, OUTPUT);
}

// store previously sent values, to detect changes
int previousA0 = -1;
int previousA1 = -1;
int previousA2 = -1;
int previousA3 = -1;
int previousA4 = -1;
int previousA5 = -1;

elapsedMillis msec = 0;

void loop() {
  
  // only check the analog inputs 50 times per second,
  // to prevent a flood of MIDI messages
  if (msec >= 20) {
    analogOne.update();
    analogTwo.update();
    analogThree.update();
    analogFour.update();
    analogFive.update();
    analogSix.update();

    button0.update();
    button1.update();
    button2.update();
    button3.update();
    button4.update();
    button5.update();
    button6.update();
    button7.update();
    button8.update();
    button9.update();
    button10.update();
    button11.update();

    if (digitalRead(lower_layer) == 0) {
      analogWrite(redPin, 0);
      analogWrite(bluePin, 5);
      analogWrite(greenPin, 0);
    } else if (digitalRead(upper_layer) == 0) {
      analogWrite(redPin, 5);
      analogWrite(bluePin, 0);
      analogWrite(greenPin, 0);
    } else {
      analogWrite(redPin, 0);
      analogWrite(bluePin, 0);
      analogWrite(greenPin, 5);
    }

    if (button0.risingEdge()) {
      usbMIDI.sendControlChange(70, 0, channel);  // 60 = C4
    }
    if (button0.risingEdge()) {
      usbMIDI.sendControlChange(70, 0, channel);  // 60 = C4
    }
    if (button2.risingEdge()) {
      usbMIDI.sendControlChange(72, 0, channel);  // 60 = C4
    }
    if (button3.risingEdge()) {
      usbMIDI.sendControlChange(73, 0, channel);  // 60 = C4
    }
    if (button4.risingEdge()) {
      usbMIDI.sendControlChange(74, 0, channel);  // 60 = C4
    }
    if (button5.risingEdge()) {
      usbMIDI.sendControlChange(75, 0, channel);  // 60 = C4
    }
    if (button6.risingEdge()) {
      usbMIDI.sendControlChange(76, 0, channel);  // 60 = C4
    }
    if (button7.risingEdge()) {
      usbMIDI.sendControlChange(77, 0, channel);  // 60 = C4
    }
    if (button8.risingEdge()) {
      usbMIDI.sendControlChange(78, 0, channel);  // 60 = C4
    }
    if (button9.risingEdge()) {
      usbMIDI.sendControlChange(79, 0, channel);  // 60 = C4
    }
    if (button10.risingEdge()) {
      usbMIDI.sendControlChange(80, 0, channel);  // 60 = C4
    }
    if (button11.risingEdge()) {
      usbMIDI.sendControlChange(81, 0, channel);  // 60 = C4
    }
    if (button12.risingEdge()) {
      usbMIDI.sendControlChange(82, 0, channel);  // 60 = C4
    }

    if (button0.fallingEdge()) {
      usbMIDI.sendControlChange(70, 1, channel);  // 60 = C4
    }
    if (button1.fallingEdge()) {
      usbMIDI.sendControlChange(71, 1, channel);  // 60 = C4
    }
    if (button2.fallingEdge()) {
      usbMIDI.sendControlChange(72, 1, channel);  // 60 = C4
    }
    if (button3.fallingEdge()) {
      usbMIDI.sendControlChange(73, 1, channel);  // 60 = C4
    }
    if (button4.fallingEdge()) {
      usbMIDI.sendControlChange(74, 1, channel);  // 60 = C4
    }
    if (button5.fallingEdge()) {
      usbMIDI.sendControlChange(75, 1, channel);  // 60 = C4
    }
    if (button6.fallingEdge()) {
      usbMIDI.sendControlChange(76, 1, channel);  // 60 = C4
    }
    if (button7.fallingEdge()) {
      usbMIDI.sendControlChange(77, 1, channel);  // 60 = C4
    }
    if (button8.fallingEdge()) {
      usbMIDI.sendControlChange(78, 1, channel);  // 60 = C4
    }
    if (button9.fallingEdge()) {
      usbMIDI.sendControlChange(79, 1, channel);  // 60 = C4
    }
    if (button10.fallingEdge()) {
      usbMIDI.sendControlChange(80, 1, channel);  // 60 = C4
    }
    if (button11.fallingEdge()) {
      usbMIDI.sendControlChange(81, 1, channel);  // 60 = C4
    }
    if (button12.fallingEdge()) {
      usbMIDI.sendControlChange(82, 1, channel);  // 60 = C4
    }

    msec = 0;
    int n0 = analogOne.getValue() / 8;
    int n1 = analogTwo.getValue() / 8;
    int n2 = analogThree.getValue() / 8;
    int n3 = analogFour.getValue() / 8;
    int n4 = analogFive.getValue() / 8;
    int n5 = analogSix.getValue() / 8;
    // only transmit MIDI messages if analog input changed
    
    if (n0 != previousA0) {
      usbMIDI.sendControlChange(controllerA0, n0, channel);
      previousA0 = n0;
    }
    if (n1 != previousA1) {
      usbMIDI.sendControlChange(controllerA1, n1, channel);
      previousA1 = n1;
    }
    if (n2 != previousA2) {
      usbMIDI.sendControlChange(controllerA2, n2, channel);
      previousA2 = n2;
    }
    if (n3 != previousA3) {
      usbMIDI.sendControlChange(controllerA3, n3, channel);
      previousA3 = n3;
    }
    if (n4 != previousA4) {
      usbMIDI.sendControlChange(controllerA4, n4, channel);
      previousA4 = n4;
    }
    if (n5 != previousA5) {
      usbMIDI.sendControlChange(controllerA5, n5, channel);
      previousA5 = n5;
    }
  }

  // MIDI Controllers should discard incoming MIDI messages.
  // http://forum.pjrc.com/threads/24179-Teensy-3-Ableton-Analog-CC-causes-midi-crash
  while (usbMIDI.read()) {
    // ignore incoming messages
  }
}
